@startuml Gestor de Inventario

!theme materia
skinparam classAttributeIconSize 0
hide empty members

title Diagrama de Clases: Sistema Gestor de Inventario (Versión Final)

' === CLASES PRINCIPALES (EL MODELO) ===

abstract class Producto {
  # id: String
  # nombre: String
  # precio: double
  # stock: int
  --
  + Producto(id: String, nombre: String, precio: double, stock: int)
  + reducirStock(cantidad: int): void
  + aumentarStock(cantidad: int): void
  + {abstract} getDescripcionDetallada(): String
}
note left of Producto
  **Clase Abstracta (Abstracción)**
  Define la estructura común a todos los productos.
  No se pueden crear objetos "Producto" directamente.
end note

class Libro extends Producto {
  - autor: String
  - isbn: String
  --
  + getDescripcionDetallada(): String
}

class Ropa extends Producto {
  - talla: String
  - color: String
  --
  + getDescripcionDetallada(): String
}

class Alimento extends Producto {
  - fechaVencimiento: LocalDate
  --
  + getDescripcionDetallada(): String
}

class Inventario {
  - listaProductos: List<Producto>
  - {static} instancia: Inventario
  --
  + {static} getInstancia(): Inventario
  + agregarProducto(p: Producto): boolean
  + eliminarProducto(id: String): boolean
  + modificarProducto(id: String, datosNuevos: Producto): boolean
  + buscarProductoPorId(id: String): Optional<Producto>
  + buscarProductosPorNombre(texto: String): List<Producto>
  + registrarVenta(productoId: String, cantidad: int): Optional<Venta>
  + getProductosConStockBajo(umbral: int): List<Producto>
}
note right of Inventario
  **Clase Gestora (Composición)**
  Contiene y gestiona todos los objetos de tipo Producto.
  Implementa el patrón Singleton para asegurar una única
  instancia del inventario en toda la aplicación.
end note

class Venta {
    - idVenta: String
    - fecha: LocalDateTime
    - productoVendido: Producto
    - cantidadVendida: int
    - totalVenta: double
}


' === CLASES DE LA INTERFAZ (VISTA Y CONTROLADOR) ===

class MainApp extends javafx.application.Application {
  + start(primaryStage: Stage): void
}

class InventarioViewController {
  - inventario: Inventario
  --
  + initialize(): void
  + onBotonAgregarClick(): void
  + onBotonModificarClick(): void
  + onBotonEliminarClick(): void
  + onBotonVenderClick(): void
  + onBusquedaCambia(): void
}
note top of InventarioViewController
  **Controlador (MVC)**
  Actúa como puente entre la Vista (FXML)
  y el Modelo (Inventario). No contiene lógica
  de negocio, solo maneja eventos de la UI.
end note


' === RELACIONES ENTRE CLASES ===

' Herencia
Producto <|-- Libro
Producto <|-- Ropa
Producto <|-- Alimento

' Composición
Inventario "1" *-- "0..*" Producto

' Asociación
Venta "1" -- "1" Producto

' Dependencias
InventarioViewController ..> Inventario : usa
MainApp ..> InventarioViewController : crea

' Dependencias del controlador a los tipos concretos (AJUSTE FINAL)
' Indica que el controlador necesita conocer los tipos para el formulario.
InventarioViewController ..> Libro
InventarioViewController ..> Ropa
InventarioViewController ..> Alimento

@enduml